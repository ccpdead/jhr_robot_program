#include <iostream>
#include <time.h>
#include "jhr_uart.h"
#include "jhr_cleanbao.h"

uint16_t cleanbao_reg_21[8] = {0};
bool cleanbao_is_21 = false;    //是否设置21完成
bool cleanbao_is_25 = false;    //是否设置25完成
bool cleanbao_is_26 = false;    //是否读取26完成

Jhr_uart cleanbao_uart("/dev/ttyCleanBao",115200);

uint16_t generateCRC16 (uint8_t* puchMsg,uint16_t usDataLen );

uint16_t getU16FromArr(uint8_t *arr){
    uint16_t ret;
    ret = arr[0]; ret <<= 8; ret +=  arr[1];
    return ret;
}
void getArrFromU16(uint16_t dat, uint8_t *arr){
    arr[0] = dat >> 8;
    arr[1] = (dat & 0xff);
}

int cleanbao_serial_isOpen()
{
    //cleanbao_uart = new Jhr_uart();
    return cleanbao_uart.uart_isOpen();
}

void cleanbao_serial_close()
{
    cleanbao_uart.uart_close();
}

/**
 * @brief 写多寄存器
 * 
 * @param addr
 * @param reg 
 * @param len 
 */
void modbus_write_register(uint16_t addr,uint16_t *reg,int len)
{
    if(cleanbao_uart.uart_isOpen())cleanbao_uart.uart_close();
    cleanbao_uart.uart_open();
    if(!cleanbao_uart.uart_isOpen())return;
    static uint8_t sz[250];
    sz[0] = 0x01;   //485地址
    sz[1] = 0x10;   //功能码
    getArrFromU16(addr,sz+2);   //寄存器起始地址
    getArrFromU16(len,sz+4);   //寄存器长度
    sz[6] = len * 2;
    for(int i=0; i< len; i++)
    {
        getArrFromU16(reg[i],sz+7+ i*2); 
    }
    int dat_len = 7 + len*2;
    uint16_t crc16 = generateCRC16(sz,dat_len);
    uint8_t*szCrc = &sz[dat_len];
    *(uint16_t*)szCrc = crc16;
    cleanbao_uart.uart_write(sz,dat_len + 2);
}

/**
 * @brief 写单寄存器
 * 
 * @param addr 
 * @param reg 
 */
void modbus_write_register(uint16_t addr,uint16_t reg)
{
    if(cleanbao_uart.uart_isOpen())cleanbao_uart.uart_close();
    cleanbao_uart.uart_open();
    if(!cleanbao_uart.uart_isOpen())return;
    static uint8_t sz[8];
    sz[0] = 0x01;   //485地址
    sz[1] = 0x06;   //功能码
    getArrFromU16(addr,sz+2);   //寄存器起始地址
    getArrFromU16(reg,sz+4);   //寄存器起始地址
    int dat_len = 6;
    uint16_t crc16 = generateCRC16(sz,dat_len);
    uint8_t*szCrc = &sz[dat_len];
    *(uint16_t*)szCrc = crc16;
    cleanbao_uart.uart_write(sz,dat_len + 2);
}

/**
 * @brief 读多寄存器
 * 
 * @param addr 
 * @param reg 
 */
void modbus_read_register(uint16_t addr,uint16_t len)
{
    if(cleanbao_uart.uart_isOpen())cleanbao_uart.uart_close();
    cleanbao_uart.uart_open();
    if(!cleanbao_uart.uart_isOpen())return;
    static uint8_t sz[8];
    sz[0] = 0x01;   //485地址
    sz[1] = 0x03;   //功能码
    getArrFromU16(addr,sz+2);   //寄存器起始地址
    getArrFromU16(len,sz+4);   //寄存器长度
    int dat_len = 6;
    uint16_t crc16 = generateCRC16(sz,dat_len);
    uint8_t*szCrc = &sz[dat_len];
    *(uint16_t*)szCrc = crc16;
    cleanbao_uart.uart_write(sz,dat_len + 2);
}
/**
 * @brief 读26开始的3个寄存器 26：消毒完成标志,27:原料状态:(1:缺料，0正常)，28:(剩余时间)
 * 
 */
void cleanbao_read_reg(void)
{
    modbus_read_register(26,3); 
}

/**
 * @brief 写25 寄存器   1：启动，0：停止
 * 
 * @param value 
 */
void cleanbao_write_reg_25()
{
    modbus_write_register(25,cleanbao_reg_21[4]);
}

/**
 * @brief 写 21 开始的四的寄存器  体积,消毒强度，消毒时间，保留
 * 
 * @param values 
 */
void cleanbao_write_reg_21()
{
    modbus_write_register(21,cleanbao_reg_21, 4);
}

uint8_t crc_check(uint8_t *buff,int len){
    uint16_t crc16_1 = generateCRC16((uint8_t*)buff,len-2);
    uint16_t crc16_2 = *(uint16_t*)&buff[len-2];
    if(crc16_1 == crc16_2)return 1; else return 0;
}
/**
 * @brief 串口接收处理
 * 
 */
void cleanbao_loop()
{
    static uint8_t buff[256];
    static int curr_len = 0;
    static time_t tim_start = 0; 
    if(!cleanbao_uart.uart_isOpen()){
        curr_len = 0;
        tim_start = 0; 
        return;
    }
    if(tim_start == 0)tim_start = time(NULL);
    time_t tim_now = time(NULL);
    if(curr_len >= sizeof(buff)) curr_len = 0;
    int len = cleanbao_uart.uart_read(buff + curr_len, sizeof(buff) - curr_len);
    int is_success = 0; //通信完成
    if(len > 0){
        curr_len += len;
        if(curr_len > 6){
            switch(buff[1]){
                case 0x10:  //设置消毒
                {
                    if(curr_len >= 8)
                    {
                        if(crc_check(buff,8)){
                            cleanbao_is_21 = true;
                        }else{
                        }
                       // is_success = 1;
                    }
                }
                    break;
                case 0x06:  //启动、停止
                {
                    if(curr_len >= 8)
                    {
                        if(crc_check(buff,8)){
                            cleanbao_is_25 = true;
                        }
                       // is_success = 1;
                    }
                }
                break;
                case 0x03:  //读取 26 27 28三个数据的值
                {
                    if(curr_len >= 11)
                    {
                        if(crc_check(buff,11)){
                            cleanbao_reg_21[5] = getU16FromArr(&buff[3]);
                            cleanbao_reg_21[6] = getU16FromArr(&buff[5]);
                            cleanbao_reg_21[7] = getU16FromArr(&buff[7]);
                            cleanbao_is_26 = true;
                        }
                    }
                    //is_success = 1;
                }
                break;
            }
        }
    }
    if(is_success > 0 || tim_now - tim_start > 1 || tim_now < tim_start){
        curr_len = 0;
        tim_start = 0; 
        cleanbao_uart.uart_close();
    }
}


/* 高位字节的CRC  值  */
uint8_t auchCRCHi[] = {
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40
} ;
/* 低位字节的CRC  值  */
uint8_t auchCRCLo[] = {
0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2,
0xC6, 0x06, 0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04,
0xCC, 0x0C, 0x0D, 0xCD, 0x0F, 0xCF, 0xCE, 0x0E,
0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09, 0x08, 0xC8,
0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC,
0x14, 0xD4, 0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6,
0xD2, 0x12, 0x13, 0xD3, 0x11, 0xD1, 0xD0, 0x10,
0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3, 0xF2, 0x32,
0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE,
0xFA, 0x3A, 0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38,
0x28, 0xE8, 0xE9, 0x29, 0xEB, 0x2B, 0x2A, 0xEA,
0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED, 0xEC, 0x2C,
0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0,
0xA0, 0x60, 0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62,
0x66, 0xA6, 0xA7, 0x67, 0xA5, 0x65, 0x64, 0xA4,
0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F, 0x6E, 0xAE,
0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA,
0xBE, 0x7E, 0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C,
0xB4, 0x74, 0x75, 0xB5, 0x77, 0xB7, 0xB6, 0x76,
0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71, 0x70, 0xB0,
0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54,
0x9C, 0x5C, 0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E,
0x5A, 0x9A, 0x9B, 0x5B, 0x99, 0x59, 0x58, 0x98,
0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B, 0x8A, 0x4A,
0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86,
0x82, 0x42, 0x43, 0x83, 0x41, 0x81, 0x80, 0x40
};
/**
 * 函数以  unsigned short 类型返回  CRC
 */
uint16_t generateCRC16 (uint8_t* puchMsg,uint16_t usDataLen )
{
    uint8_t uchCRCHi = 0xFF ;  // CRC  的高字节初始化
    uint8_t uchCRCLo = 0xFF ;  // CRC  的低字节初始化
    uint8_t uIndex ;  // CRC 查询表索引

    while (usDataLen--)	// 完成整个报文缓冲区
    {
        uIndex = uchCRCLo ^ *puchMsg++ ;  //计算  CRC
        uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
        uchCRCHi = auchCRCLo[uIndex] ;
    }
    return (uchCRCHi << 8 | uchCRCLo) ;
}


