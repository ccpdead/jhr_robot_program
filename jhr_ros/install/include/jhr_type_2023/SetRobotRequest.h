// Generated by gencpp from file jhr_type_2023/SetRobotRequest.msg
// DO NOT EDIT!


#ifndef JHR_TYPE_2023_MESSAGE_SETROBOTREQUEST_H
#define JHR_TYPE_2023_MESSAGE_SETROBOTREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jhr_type_2023
{
template <class ContainerAllocator>
struct SetRobotRequest_
{
  typedef SetRobotRequest_<ContainerAllocator> Type;

  SetRobotRequest_()
    : type(0)
    , msg()  {
    }
  SetRobotRequest_(const ContainerAllocator& _alloc)
    : type(0)
    , msg(_alloc)  {
  (void)_alloc;
    }



   typedef int32_t _type_type;
  _type_type type;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _msg_type;
  _msg_type msg;





  typedef boost::shared_ptr< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetRobotRequest_

typedef ::jhr_type_2023::SetRobotRequest_<std::allocator<void> > SetRobotRequest;

typedef boost::shared_ptr< ::jhr_type_2023::SetRobotRequest > SetRobotRequestPtr;
typedef boost::shared_ptr< ::jhr_type_2023::SetRobotRequest const> SetRobotRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator1> & lhs, const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator2> & rhs)
{
  return lhs.type == rhs.type &&
    lhs.msg == rhs.msg;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator1> & lhs, const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jhr_type_2023

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b59a85672ea08e7587eb7e0692179fa8";
  }

  static const char* value(const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb59a85672ea08e75ULL;
  static const uint64_t static_value2 = 0x87eb7e0692179fa8ULL;
};

template<class ContainerAllocator>
struct DataType< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jhr_type_2023/SetRobotRequest";
  }

  static const char* value(const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 type\n"
"string msg\n"
;
  }

  static const char* value(const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.type);
      stream.next(m.msg);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetRobotRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jhr_type_2023::SetRobotRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jhr_type_2023::SetRobotRequest_<ContainerAllocator>& v)
  {
    s << indent << "type: ";
    Printer<int32_t>::stream(s, indent + "  ", v.type);
    s << indent << "msg: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.msg);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JHR_TYPE_2023_MESSAGE_SETROBOTREQUEST_H
